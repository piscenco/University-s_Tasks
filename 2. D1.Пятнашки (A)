#include <iostream>
#include <vector>
#include <queue>
#include <utility>
#include <algorithm>
#include <set>
#include <cmath>
#include <cstdlib>

using std::vector;
using std::queue;
using std::set;
using std::min;
using std::pair;

enum res { NoMoves, CanNotDo, NeedToMove};


bool IsSolvable(vector<vector<int> > a) {
	int e;
	for (int p = 0; p < 4; ++p) {
		for (int j = 0; j < 4; ++j) {
			if (a[p][j] == 0) {
				e = p + 1;
				break;
			}
		}
	}
	int Ni = e;
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 4; ++j) {
			// std::cout <<std::endl<< a[i][j]<< " * ";
			bool hasReached = false;
			for (int r = 0; r < 4; ++r) {
				for (int k = 0; k < 4; ++k) {
					if (r == i & k == j)
						hasReached = true;
					if (hasReached) {
						if (a[r][k] < a[i][j]) {
							++Ni;
							//  std::cout <<a[r][k]<< "  ";
						}

					}
				}
			}

		}
	}
	if (Ni % 2 == 0) return true;
	return false;
}
int CalculateEvristic(vector<vector<int> > a) {
	for (int p = 0; p < 4; ++p) {
		for (int j = 0; j < 4; ++j) {
			if (a[p][j] == 0) {
				a[p][j] = 16;
				break;
			}
		}
	}
	int result = 0;
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 4; ++j) {
			result += abs(i - (a[i][j] - 1) / 4);// dif for x
			result += abs(j - (a[i][j] - 1) % 4);// dif for y
		}
	}
	return result;

}

struct gamePos {
public:
	gamePos() :evristic(1000000) {
		vector<vector<int>> matr(4, vector<int>(4));
	}
	void set(int a, int b, int c) {
		matr[a][b] = c;
	}
	~gamePos() = default;
	vector<vector<int>> matr;
	vector<char> parent;
	int evristic;
};

bool operator< (const gamePos&  a, const gamePos&  b)
{
	return a.evristic > b.evristic;
}

vector<int> ChangeV(vector<vector<int> > a) {
	vector <int> newV;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			//std::cout << pow(10, i*3 + j + 1)<< std :: endl;
			newV.push_back(a[i][j]);
		}
	}
	return newV;
}

bool IsTheSame(vector<vector<int> > a) {
	if (a[0][0] == 1 && a[0][1] == 2 && a[0][2] == 3 & a[0][3] == 4 &&
		a[1][0] == 5 && a[1][1] == 6 && a[1][2] == 7 && a[1][3] == 8 &&
		a[2][0] == 9 && a[2][1] == 10 && a[2][2] == 11 && a[2][3] == 12 &&
		a[3][0] == 13 && a[3][1] == 14 && a[3][2] == 15 && a[3][3] == 0)
		return true;
	return false;
}



vector <char> MysticSquare(vector<vector<int>>& initial, res & ansType) {
	vector<char> v;
	if (IsTheSame(initial)) {
		ansType = NoMoves;
		return v;
	}
	//std::make_pair(int, gamePos)
	std::priority_queue<gamePos> myPQueue;
	//priority_queue<make_pair()vasya, vector<vasya>, bool(*)(vasya,vasya)> // так выглядит тип

	// queue<gamePos> myQueue;
	set<vector<int> > mySet;
	gamePos next;
	next.matr = initial;
	int minEvrist = CalculateEvristic(next.matr);
	next.evristic = minEvrist;
	int myEv;
	myPQueue.push(next);
	int i = 0;
	while (!IsTheSame(next.matr) && !myPQueue.empty()) {
		next = myPQueue.top();
		myPQueue.pop();
		int zeroPos1;
		int zeroPos2;
		for (int p = 0; p < 4; ++p) {
			for (int j = 0; j < 4; ++j) {
				if (next.matr[p][j] == 0) {
					zeroPos1 = p;
					zeroPos2 = j;
					break;
				}
			}
		}
		gamePos child = next;
		int y = child.parent.size();
		if (y == 0 || child.parent[y - 1] != 'U') {
			if (zeroPos1 - 1 >= 0) {
				child.matr[zeroPos1][zeroPos2] = child.matr[zeroPos1 - 1][zeroPos2];
				child.set(zeroPos1 - 1, zeroPos2, 0);
				child.parent.push_back('D');
				vector<int> helpV = ChangeV(child.matr);
				myEv = CalculateEvristic(child.matr);
				child.evristic = myEv;
				if (mySet.find(helpV) == mySet.end())
				{
					//minEvrist = min(minEvrist, myEv);
					myPQueue.push(child);
					mySet.insert(helpV);
				}
			}
		}
		if (y == 0 || child.parent[y - 1] != 'D') {
			child = next;
			if (zeroPos1 + 1 < 4) {
				child.matr[zeroPos1][zeroPos2] = child.matr[zeroPos1 + 1][zeroPos2];
				child.set(zeroPos1 + 1, zeroPos2, 0);
				child.parent.push_back('U');
				vector<int>  helpV = ChangeV(child.matr);
				myEv = CalculateEvristic(child.matr);
				child.evristic = myEv;
				if (mySet.find(helpV) == mySet.end())
				{
					//minEvrist = min(minEvrist, myEv);
					myPQueue.push(child);
					mySet.insert(helpV);
				}
			}
		}
		if (y == 0 || child.parent[y - 1] != 'R') {

			child = next;
			if (zeroPos2 + 1 < 4) {
				child.matr[zeroPos1][zeroPos2] = child.matr[zeroPos1][zeroPos2 + 1];
				child.matr[zeroPos1][zeroPos2 + 1] = 0;
				child.parent.push_back('L');
				vector<int>  helpV = ChangeV(child.matr);
				myEv = CalculateEvristic(child.matr);
				child.evristic = myEv;
				if (mySet.find(helpV) == mySet.end())
				{
					// minEvrist = min(minEvrist, myEv);
					myPQueue.push(child);
					mySet.insert(helpV);
				}
			}
		}

		if (y = 0 || child.parent[y - 1] != 'L') {
			child = next;
			if (zeroPos2 - 1 >= 0) {
				child.matr[zeroPos1][zeroPos2] = child.matr[zeroPos1][zeroPos2 - 1];
				child.matr[zeroPos1][zeroPos2 - 1] = 0;
				child.parent.push_back('R');
				vector<int>  helpV = ChangeV(child.matr);
				myEv = CalculateEvristic(child.matr);
				child.evristic = myEv;
				if (mySet.find(helpV) == mySet.end())
				{
					//minEvrist = min(minEvrist, myEv);
					myPQueue.push(child);
					mySet.insert(helpV);
				}
			}
		}
		++i;
		//std::cout << child.parent.size()<<std::endl;
	}
	if (IsTheSame(next.matr))
	{
		// for(int i = 0; i < next.parent.size(); i++){
		//     std::cout << next.parent[i];
		// }
		ansType = NeedToMove;
		return next.parent;
	}
	ansType = CanNotDo;
	return v;
}
int main() {
	vector<vector<int>> initial(4, vector<int>(4));
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 4; ++j) {
			std::cin >> initial[i][j];
		}
	}
	vector<char> result;
	res ansType;
	result = MysticSquare(initial, ansType);
	switch (ansType) {
	case CanNotDo:
		std::cout << "-1";
		break;
	case NoMoves:
		std::cout << "0";
		break;
	case NeedToMove:
		std::cout << result.size() << std::endl;
		for (int i = 0; i < result.size(); i++) {
			std::cout << result[i];
		}
		break;
	}
	return 0;
}
