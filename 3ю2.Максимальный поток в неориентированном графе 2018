// flow.fin.cpp : Defines the entry point for the console application.
//
//#include "stdafx.h"
#include <vector>
#include <queue>
#include <iostream>
#include<algorithm>

using std::queue;
using std::vector;

//using namespace std;
const int MAX_NUM = std::numeric_limits<int>::max();

struct edge
{
	edge() {};
	edge(int a, int b, int c) :
		v(a), c(b), p(c) {};
	int v;
	int c;
	int p;
};


bool bfs(int n, vector<int>& distance, vector<int>& iter, vector< vector< edge > >& graph)
{
	int s = 0;
	int t = n - 1;
	for (int i = 0; i < n; i++)
		distance[i] = -1;
	queue< int > v_queue;
	distance[s] = 0;
	v_queue.push(s);
	while (!v_queue.empty()) {
		int p = v_queue.front();
		v_queue.pop();
		for (unsigned int i = 0; i < graph[p].size(); i++) {
			const edge &e = graph[p][i];
			if (e.c > 0 && distance[e.v] == -1) {
				distance[e.v] = distance[p] + 1;
				v_queue.push(e.v);
			}
		}
	}
	return (distance[t] != -1);
}

int dfs(int begin, int t, int flow, int n, vector<int>& distance, vector<int>& iter, vector< vector< edge > >& graph)
{
	if (begin == t || flow == 0) 
		return flow;
	for (unsigned int i = 0; i < graph[begin].size(); i++) {
		edge &e = graph[begin][i];
		if (e.c > 0 && distance[begin] < distance[e.v]) {
			int d = dfs(e.v, t, std::min(flow, e.c), n, distance, iter, graph);
			if (d > 0) {
				e.c -= d;
				graph[e.v][e.p].c += d;
				return (d);
			}
		}
	}
	return (0);
}

int Max_flow_with_Din(int n, vector<int>& distance, vector<int>& iter, vector< vector< edge > >& graph )
{
	int s = 0;
	int t = n - 1;
	int flow = 0;
	while (bfs(n, distance, iter, graph)) {
		for (int i = 0; i < n; i++)
		iter[i] = 0;
		int f = 0;
		while ((f = dfs(s, t, MAX_NUM, n, distance, iter, graph)) > 0) {
			flow += f;
		}
	}
	return (flow);
}

int main()
{
	int n, m;
	std::cin >> n >> m;
	vector< vector< edge > > graph(n);
	vector<int> distance(n), iter(n);
	for (int i = 0; i < m; i++) {
		int a, b, c;
		std::cin >> a >> b >> c;
		a--;
		b--;
		graph[a].push_back(edge( b, c, static_cast<int>(graph[b].size()) ));
		graph[b].push_back(edge( a, 0, static_cast<int>(graph[a].size()) - 1 ));
		
	}
	std::cout << Max_flow_with_Din(n, distance, iter, graph) << std::endl;
	//std::cin >> n;
}
