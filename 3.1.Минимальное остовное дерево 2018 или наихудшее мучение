#include <vector>
#include <iostream>
#include <set>
#include <list>

using std::vector;
using std::list;
using std::pair;
using std::make_pair;
using std::set;


unsigned int Prima(int n, vector<list<std::pair<unsigned short, unsigned  int>>>& all_verticles) {
	const int INF = 100001;
	vector<unsigned int> distance(n, INF); 
	vector<bool> isVisited(n, false);
	set<std::pair<unsigned int, unsigned short>> my_set;
	distance[0] = 0;
	int answer = 0;
	for (int i = 0; i < n; i++)
		my_set.emplace(make_pair(distance[i], i));
	while (!my_set.empty()) {
		int v = my_set.begin()->second;
		my_set.erase(my_set.begin());
		isVisited[v] = true;
		vector<std::pair<unsigned short, unsigned int>> vertices;
		for (const std::pair<unsigned short, unsigned int> &i : all_verticles[v])
			vertices.push_back(i);
		for (auto &u : vertices) {
			if (!isVisited[u.first] && distance[u.first] > u.second) {
				my_set.erase(my_set.find(make_pair(distance[u.first], u.first)));
				distance[u.first] = u.second;
				my_set.emplace(distance[u.first], u.first);
			}
		}
	}
	unsigned int result = 0;
	for (unsigned int &w : distance) {
		result += w;
	}
	return result;
}


int main() {
	int n = 0;
	int m = 0;
	std::cin >> n >> m;
	vector<list<std::pair<unsigned short, unsigned  int>>> all_verticles(n);
	for (int i = 0; i < m; i++) {
		int a = 0;
		int b = 0;
		int w = 0;
		std::cin >> a >> b >> w;
		a--;
		b--;
		all_verticles[a].push_back(make_pair(b, w));
		all_verticles[b].push_back(make_pair(a, w));
	}
	std::cout << Prima(n, all_verticles);
}
